plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.14'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id 'maven-publish'
    id 'java-library'
    id 'signing'
}

group = webOsGroup
version = webOsVersion

java {
    sourceCompatibility = '1.8'
}

repositories {
    maven { url "https://maven.aliyun.com/nexus/content/groups/public" }
    mavenCentral()
}

dependencies {
    compileOnly 'org.projectlombok:lombok:1.18.8'
    annotationProcessor 'org.projectlombok:lombok:1.18.8'
    implementation 'org.springframework.boot:spring-boot-starter-web'
//    implementation 'org.springframework.boot:spring-boot-starter-websocket'

    compileOnly 'org.springframework.boot:spring-boot-loader'
    compileOnly project(":os-launch")
    compileOnly project(":os-api")
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation project(":os-api")
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
}

tasks.named('compileJava') {
    inputs.files(tasks.named('processResources'))
}
// 打包sourcesJar任务
task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

// 打包javadocJar任务
task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

tasks.withType(Javadoc) {
    failOnError false
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addStringOption('encoding', 'UTF-8')
    options.addStringOption('charSet', 'UTF-8')
}
task 'classpath.dev'{
    doFirst {
        def classpath = sourceSets.main.runtimeClasspath
        def content = "cn.donting.web.os.core.OsCoreApplication\n"
        classpath.forEach {
            content+=it.getPath()+"\n";
        }
        def file = file('../os-core.wev')  // 文件路径相对于项目根目录
        file.text = content  // 使用 .text 属性将内容写入文件
    }

}
publishing {
    repositories {
        maven {
            File mv = new File(getProject().getRootDir().getPath() + File.separator + "maven.properties")
            if(!mv.exists()){
                return
            }
            Properties properties = new Properties()
            properties.load(new FileInputStream(mv))
            def userName = properties.getProperty("username")
            def passWord = properties.getProperty("password")
            def releasesRepoUrl = "https://oss.sonatype.org/content/repositories/releases/"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
            credentials {
                username userName
                password passWord
            }
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
    publications {
        mavenJava(MavenPublication) {
            groupId = webOsGroup
            artifactId = "web-os-core"
            version = webOsVersion
//            from components.java
            artifact bootJar
            artifact sourcesJar
            artifact javadocJar
            pom {
                name = 'web-os-core'
                description = 'os-core'
                url = 'https://github.com/WebOSCrud/web-os'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'donting'
                        name = 'donting'
                        email = '596643891@qq.com'
                    }
                }

            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}